export declare const Wrapper: import("styled-components").IStyledComponent<"web", {
    className?: string | undefined;
    style?: import("react").CSSProperties | undefined;
    onClick?: (() => void) | undefined;
    children?: ((string | number | bigint | boolean | import("react").ReactElement<unknown, string | import("react").JSXElementConstructor<any>> | Iterable<import("react").ReactNode> | import("react").ReactPortal | Promise<string | number | bigint | boolean | import("react").ReactPortal | import("react").ReactElement<unknown, string | import("react").JSXElementConstructor<any>> | Iterable<import("react").ReactNode> | null | undefined> | import("react").ReactNode[]) & (string | number | bigint | boolean | import("react").ReactElement<unknown, string | import("react").JSXElementConstructor<any>> | Iterable<import("react").ReactNode> | import("react").ReactPortal | Promise<string | number | bigint | boolean | import("react").ReactPortal | import("react").ReactElement<unknown, string | import("react").JSXElementConstructor<any>> | Iterable<import("react").ReactNode> | null | undefined>)) | null | undefined;
    display?: import("csstype").Property.Display | undefined;
    flexDirection?: import("csstype").Property.FlexDirection | undefined;
    justifyContent?: import("csstype").Property.JustifyContent | undefined;
    alignItems?: import("csstype").Property.AlignItems | undefined;
    alignContent?: import("csstype").Property.AlignContent | undefined;
    gap?: import("csstype").Property.Gap<string | number> | undefined;
    flexWrap?: import("csstype").Property.FlexWrap | undefined;
    flexGrow?: import("csstype").Property.FlexGrow | undefined;
    flexShrink?: import("csstype").Property.FlexShrink | undefined;
    flexBasis?: import("csstype").Property.FlexBasis<string | number> | undefined;
    alignSelf?: import("csstype").Property.AlignSelf | undefined;
    height?: import("csstype").Property.Height<string | number> | undefined;
    maxHeight?: import("csstype").Property.MaxHeight<string | number> | undefined;
    minHeight?: import("csstype").Property.MinHeight<string | number> | undefined;
    width?: import("csstype").Property.Width<string | number> | undefined;
    maxWidth?: import("csstype").Property.MaxWidth<string | number> | undefined;
    minWidth?: import("csstype").Property.MinWidth<string | number> | undefined;
    padding?: import("csstype").Property.Padding<string | number> | undefined;
    paddingTop?: import("csstype").Property.PaddingTop<string | number> | undefined;
    paddingRight?: import("csstype").Property.PaddingRight<string | number> | undefined;
    paddingBottom?: import("csstype").Property.PaddingBottom<string | number> | undefined;
    paddingLeft?: import("csstype").Property.PaddingLeft<string | number> | undefined;
    margin?: import("csstype").Property.Margin<string | number> | undefined;
    marginTop?: import("csstype").Property.MarginTop<string | number> | undefined;
    marginRight?: import("csstype").Property.MarginRight<string | number> | undefined;
    marginBottom?: import("csstype").Property.MarginBottom<string | number> | undefined;
    marginLeft?: import("csstype").Property.MarginLeft<string | number> | undefined;
    border?: import("csstype").Property.Border<string | number> | undefined;
    borderTop?: import("csstype").Property.BorderTop<string | number> | undefined;
    borderRight?: import("csstype").Property.BorderRight<string | number> | undefined;
    borderBottom?: import("csstype").Property.BorderBottom<string | number> | undefined;
    borderLeft?: import("csstype").Property.BorderLeft<string | number> | undefined;
    borderRadius?: import("csstype").Property.BorderRadius<string | number> | undefined;
    boxShadow?: import("csstype").Property.BoxShadow | undefined;
    backgroundColor?: import("csstype").Property.BackgroundColor | undefined;
    color?: import("csstype").Property.Color | undefined;
    fontSize?: import("csstype").Property.FontSize<string | number> | undefined;
    fontWeight?: import("csstype").Property.FontWeight | undefined;
    lineHeight?: import("csstype").Property.LineHeight<string | number> | undefined;
    letterSpacing?: import("csstype").Property.LetterSpacing<string | number> | undefined;
    textAlign?: import("csstype").Property.TextAlign | undefined;
    fillChildren?: boolean | undefined;
    visible?: boolean | undefined;
}> & import("react").FC<import("../box/box").BoxProps>;
//# sourceMappingURL=lazy-box.style.d.ts.map